import { useEffect, useRef, useState } from 'react'

import { MapContainer, Marker, Popup, TileLayer } from 'react-leaflet'
import Loader from 'react-loaders'
import { ClipLoader } from 'react-spinners'
import { toast, ToastContainer } from 'react-toastify'
import 'react-toastify/dist/ReactToastify.css'

import AnimatedLetters from '../AnimatedLetters'
import './index.scss'

const Contact = () => {
  const [letterClass, setLetterClass] = useState('text-animate')
  const form = useRef()
  const [loading, setLoading] = useState(false)
  const contactArray = '–ö–æ–Ω—Ç–∞–∫—Ç—ã'.split('')

  useEffect(() => {
    setTimeout(() => {
      setLetterClass('text-animate-hover')
    }, 3000)
  }, [])

// –í –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–µ Contact/index.js –∏–∑–º–µ–Ω–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é handleSubmit:

  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);

    const formData = {
      name: form.current.name.value,
      email: form.current.email.value,
      subject: form.current.subject.value,
      message: form.current.message.value
    };

    const telegramMessage = `
üì® –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!

üë§ –ò–º—è: ${formData.name}
üìß Email: ${formData.email}
üìù –í–æ–ø—Ä–æ—Å: ${formData.subject}
üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: ${formData.message}
    `;

    try {
      const response = await fetch(`https://api.telegram.org/bot${process.env.REACT_APP_TELEGRAM_BOT_TOKEN}/sendMessage`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          chat_id: process.env.REACT_APP_TELEGRAM_CHAT_ID,
          text: telegramMessage,
          parse_mode: 'HTML'
        })
      });

      if (!response.ok) {
        throw new Error('Failed to send message to Telegram');
      }

      toast.success('–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!', {
        position: 'bottom-center',
        autoClose: 3500,
        hideProgressBar: false,
        closeOnClick: true,
        pauseOnHover: true,
        draggable: true,
        progress: undefined,
        theme: 'dark',
      });

      form.current.reset();
      setLoading(false);

    } catch (error) {
      console.error('Error:', error);
      setLoading(false);
      toast.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞', {
        position: 'bottom-center',
        autoClose: 3500,
        hideProgressBar: false,
        closeOnClick: true,
        pauseOnHover: true,
        draggable: true,
        progress: undefined,
        theme: 'dark',
      });
    }
  };

  return (
      <>
        <div className="container contact-page">
          <div className="text-zone">
            <h1>
              <AnimatedLetters
                  letterClass={letterClass}
                  strArray={contactArray}
                  idx={15}
              />
            </h1>
            <p>
              –Ø –æ—Ç–∫—Ä—ã—Ç –¥–ª—è –Ω–æ–≤—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞. –ï—Å–ª–∏ –≤—ã –∏—â–µ—Ç–µ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞, —Å–ø–æ—Å–æ–±–Ω–æ–≥–æ
              –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∏–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è –∏ –¥–æ—Å—Ç–∏—á—å –≤—ã—Å–æ–∫–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, –±—É–¥—É —Ä–∞–¥ –æ–±—Å—É–¥–∏—Ç—å –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã.
            </p>
            <div className="contact-form">
              <form ref={form} onSubmit={handleSubmit}>
                <ul>
                  <li className="half">
                    <input
                        placeholder="–ò–º—è"
                        type="text"
                        name="name"
                        required
                    />
                  </li>
                  <li className="half">
                    <input
                        placeholder="Email"
                        type="email"
                        name="email"
                        required
                    />
                  </li>
                  <li>
                    <input
                        placeholder="–í–æ–ø—Ä–æ—Å"
                        type="text"
                        name="subject"
                        required
                    />
                  </li>
                  <li>
                  <textarea
                      placeholder="–°–æ–æ–±—â–µ–Ω–∏–µ"
                      name="message"
                      required
                  ></textarea>
                  </li>
                  <li>
                    <button
                        type="submit"
                        className="flat-button"
                        disabled={loading}
                    >
                      {loading ? <ClipLoader color="#fff" size={20}/> : '–û–¢–ü–†–ê–í–ò–¢–¨'}
                    </button>
                  </li>
                </ul>
                <ToastContainer/>
              </form>
            </div>
          </div>
        </div>
        <Loader type="pacman"/>
      </>
  )
}

export default Contact